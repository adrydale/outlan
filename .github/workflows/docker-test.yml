name: Test Docker Image

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

jobs:
  test-docker:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Verify build context
      run: |
        echo "=== Build context files ==="
        ls -la
        echo ""
        echo "=== Dockerfile contents ==="
        cat Dockerfile
        echo ""
        echo "=== Requirements file ==="
        cat requirements.txt
        echo ""
        echo "=== Entrypoint script ==="
        cat entrypoint.sh

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: outlan:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

    - name: Debug build results
      run: |
        echo "=== Available Docker images ==="
        docker images
        echo ""
        echo "=== Looking for outlan:test ==="
        docker images outlan:test || echo "Image not found"
        echo ""
        echo "=== Docker system info ==="
        docker system df
        echo ""
        echo "=== Build context ==="
        ls -la

    - name: Verify image was built
      run: |
        if docker images outlan:test | grep -q outlan; then
          echo "✅ Image found, proceeding with tests"
          docker inspect outlan:test
        else
          echo "❌ Error: outlan:test image not found"
          echo "Build step may have failed"
          exit 1
        fi

    - name: Test Docker image functionality
      run: |
        # Start the container
        docker run -d --name outlan-test -p 5000:5000 outlan:test
        
        # Wait for container to be ready
        sleep 15
        
        # Check if container is running
        docker ps | grep outlan-test || exit 1
        
        # Test if the application is responding
        curl -f http://localhost:5000/ || exit 1
        
        # Test health endpoint
        curl -f http://localhost:5000/api/health || exit 1
        
        # Test version endpoint
        curl -f http://localhost:5000/api/version || exit 1
        
        # Clean up
        docker stop outlan-test || true
        docker rm outlan-test || true

    - name: Test Docker image with volumes
      run: |
        # Create test directories
        mkdir -p test-data test-logs test-config
        
        # Start container with volumes
        docker run -d --name outlan-test-volumes \
          -p 5001:5000 \
          -v $(pwd)/test-data:/app/data \
          -v $(pwd)/test-logs:/app/logs \
          -v $(pwd)/test-config:/app/config \
          -e TZ=UTC \
          outlan:test
        
        # Wait for container to be ready
        sleep 15
        
        # Check if container is running
        docker ps | grep outlan-test-volumes || exit 1
        
        # Test if the application is responding
        curl -f http://localhost:5001/ || exit 1
        
        # Check if data directory is created
        ls -la test-data/ || exit 1
        
        # Clean up
        docker stop outlan-test-volumes || true
        docker rm outlan-test-volumes || true
        rm -rf test-data test-logs test-config

    - name: Test Docker image environment variables
      run: |
        # Test with custom environment variables
        docker run -d --name outlan-test-env \
          -p 5002:5000 \
          -e TZ=America/New_York \
          -e LOG_LEVEL=DEBUG \
          -e SNAPSHOT_LIMIT=50 \
          outlan:test
        
        # Wait for container to be ready
        sleep 15
        
        # Check if container is running
        docker ps | grep outlan-test-env || exit 1
        
        # Test if the application is responding
        curl -f http://localhost:5002/ || exit 1
        
        # Clean up
        docker stop outlan-test-env || true
        docker rm outlan-test-env || true

  test-security:
    runs-on: ubuntu-latest
    needs: test-docker
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      security-events: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image for security scan
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: outlan:security-scan
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

    - name: Verify image was built
      run: |
        echo "Checking if security scan image was built..."
        docker images outlan:security-scan
        docker inspect outlan:security-scan

    - name: Verify image exists for Trivy
      run: |
        echo "Available images:"
        docker images
        echo ""
        echo "Looking for outlan:test image..."
        if docker images outlan:test 2>/dev/null | grep -q outlan; then
          echo "✅ Image found, proceeding with Trivy scan"
        else
          echo "❌ Error: outlan:test image not found"
          echo "This might be because the build step failed"
          exit 1
        fi

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      continue-on-error: true
      with:
        image-ref: outlan:test
        format: 'sarif'
        output: 'trivy-results.sarif'
        exit-code: '0'
        severity: 'CRITICAL,HIGH'

    - name: Check Trivy results
      run: |
        if [ -f "trivy-results.sarif" ]; then
          echo "Trivy SARIF file created successfully"
          ls -la trivy-results.sarif
        else
          echo "Warning: Trivy SARIF file not found"
          ls -la *.sarif || echo "No SARIF files found"
        fi

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always() && hashFiles('trivy-results.sarif') != ''
      continue-on-error: true
      with:
        sarif_file: 'trivy-results.sarif' 